#summary How to build MacVim
#labels Featured,Phase-Implementation

=Building !MacVim from the Git repository=

==Summary==

If you know what you are doing, then this should be enough to get you going:
  * Clone the !MacVim.git repo: `git clone git://repo.or.cz/MacVim.git vim7`
  * Configure and build Vim: `cd vim7/src; ./configure --enable-gui=macvim; make`
  * Build !MacVim.app: `cd MacVim; xcodebuild`
  * Run: `open build/Release/MacVim.app`
Make sure you pass `--enable-gui=macvim` to `configure`, else everything will
build but no windows open when you run the application.



==Installing Git==

If you already have !MacPorts installed, then you can install Git by opening a Terminal window and
typing
{{{
localhost:~ user$ sudo port install git-core
}}}

If you do not already have !MacPorts installed, be warned that installing both !MacPorts and Git will take a _long_ time. A faster alternative is to install Git directly from the sources, but it requires that you know what you are doing.

To install Git from the source code archive:
  * download the latest Git source code archive from http://git.or.cz
  * if you are compiling on Mac OS X 10.4, then you also need to download the [http://sourceforge.net/projects/expat/ Expat library] _(skip this step if you are running Mac OS X 10.5)_
  * make and install Expat _(skip this step if you are running Mac OS X 10.5)_
  * make and install Git (gotcha: it is not possible to build the documentation without installing additional libraries first; check the INSTALL file that comes with the Git source code)
More detailed instructions can be found [http://funkaoshi.com/blog/building-git-on-mac-os-x here].


==Downloading and building==

Once you have Git installed you first have to clone the !MacVim.git repo
{{{
localhost:~ user$ git clone git://repo.or.cz/MacVim.git vim7
}}}
This will create a folder named `vim7` and populate it with all the source code
needed to build !MacVim (you can choose any name you want instead of `vim7`).

Next, you have to configure Vim to include the !MacVim specific code and build Vim
{{{
localhost:~ user$ cd vim7/src
localhost:~/vim7/src user$ ./configure --enable-gui=macvim --with-features=huge
localhost:~/vim7/src user$ make
}}}
Be very careful when typing that second line!  If you misspell the parameters to
configure then everything will compile but !MacVim won't open any windows when
you start it.  After `make` finishes you should have a binary named `Vim` in
the `vim7/src` folder.

The final step is to build the !MacVim application.
{{{
localhost:~/vim7/src user$ cd MacVim
localhost:~/vim7/src/MacVim user$ xcodebuild
}}}
That's it!  !MacVim.app is in the `build/Release` folder, try to run it by
typing
{{{
localhost:~/vim7/src/MacVim user$ open build/Release/MacVim.app
}}}


==Updating an existing Git repository==

If you already have the !MacVim.git repo then updating it is as easy as
{{{
localhost:~ user$ cd vim7
localhost:~/vim7 user$ git pull
}}}


==Contributing with patches==

Patches can be created using the git-format-patch command, for example
{{{
localhost:~/vim7 user$ git-format-patch origin/master
}}}
This will create a patch including all the differences between the
current branch and the latest master branch you pulled from the public repo.
{{{
localhost:~/vim7 user$ git-format-patch HEAD^
}}}
This will create a patch that contains all changes included in your last commit.

Once you have created a patch you should post it to the vim_mac mailing list,
either manually or by using git-send-email.



=Running several versions of !MacVim simultaneously=

If you have one version of !MacVim in e.g. `/Applications` and then build another with Xcode and try to run it, there will be trouble (since both are listening to the same named port for new Vim connections).  To get around this do the following (assuming you have installed !MacVim in the Applications folder):
  * Open a Finder window on `/Applications`
  * Rename `MacVim` to `MacVim-devel`
  * Ctrl-click on the `MacVim-devel` icon and choose 'Show Package Contents'
  * In the window that opens, double-click on `Contents` and then on `Info.plist`; this will bring up the 'Property List Editor'
  * Expand `Root`, change `CFBundleIdentifier` to `org.vim.MacVim-devel`; save and quit the 'Property List Editor'

You can now run !MacVim-devel whilst building and running !MacVim in Xcode.

Alternatively, if you can leave the version in `/Applications` alone (say, if this is the snapshot build) and modify the CFBundleIdentifier of the version you are building instead.  To do this, open the file `Info.plist` inside the `src/MacVim` folder and change the value of CFBundleIdentifier (e.g. add `-devel` to the end).  Each time !MacVim is built it will copy `Info.plist` to the app bundle so that your custom built !MacVim will have a different CFBundleIdentifier from the version inside `/Applications`.


=Building a universal binary=

By default only a native binary will be built.  To build a universal binary you must first pass `--with-mac-arch=both` to `configure` and then edit the build settings for _both_ `MacVim.xcodeproj` and `PSMTabBarControl.xcodeproj`.  This is how you change the build settings in Xcode:
  * Select `MacVim` under `Targets` in the left-hand column in Xcode, then press Cmd-I to open up the 'Info' window
  * Click the `Build` tab and locate the `Architectures` setting, double-click on it and select both `PowerPC` and `Intel`
  * Do the same for the PSMTabBarControlProject



=Random notes=

  * At the moment the Vim runtime files are not updated inside the app bundle if they are modified.  If you modify any runtime files, then you have to clean the !MacVim project and build it again.



=Building !MacVim from the Subversion repository=

The subversion repository has been deprecated, please use Git to download and build !MacVim.